<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>npc_dino_sprite_02</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defualt Settings

//Non-Riding Defaults (Adjustable)
travelspeed = 3
roamtime = 80 //the amount of FRAMES that the dino roams until its animation
idletime = 40 //he amount of FRAMES that the dino is idle
image_speed = 0.5 //how fast the animations play

//Riding Defaults (Adjustable)
ridespeed = 8 //how fast move when riding
jump_speed = 15

//Default Settings
fd = false //faceing direction, false = left, set to "choose(false,true)" if you want it to be randomized
timer = idletime //set to "random(travelspeed)" if you want it to start of randomized.
state = 0 //0 = idle, 1 = walking, riding
switchfd = false //wheather to turn around after idle

//Saddle Mask
saddleobj = instance_create(x,y,Obj_npc_03_stub)
saddleobj.x = x+32
saddleobj.y = y+32
saddleobj.obj_assigned = id
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timers and actions
timer--

switch(state){
    case 0: //idle
        if timer &lt;= 0{ //switching from idle to roaming
            state = 1
            timer = roamtime
            if switchfd{
                fd = !fd          //switch directions
                switchfd = false; //reset variable
            }
        }
        hspeed *= 0.8
        break;
    case 1: //walking
        if timer &lt;= 0{ //Switching from roaming to idle (no collisions)
            state = 0
            timer = idletime
        } 
        hspeed = travelspeed * (1-2*!fd) //(1-2*!fd) means 1 minus 2 times the inverse value of FD
        //Meaning when going left, fd will be 'false' or '0', making !fd 'true' or '1', makeing (1-2*!fd) = -1, causing the movement speed to be reversed.
        break;
    case 2: //riding
        if keyboard_check(vk_right){
            hspeed += ridespeed*0.4
            fd = true   
        }
        if keyboard_check(vk_left){
            hspeed += -ridespeed*0.4
            fd = false
        }
        if keyboard_check(vk_up) and place_meeting(x,y+1,b_mask)
            vspeed = -jump_speed
        
        hspeed *= 0.8
        
        if keyboard_check(vk_down){ //jumping off
            riding = false
            state = 0
            Player.yspeed = -10
            Player.riding = false
            Player.riding_obj = noone
        }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions
if state = 1{
    if collision_rectangle(x-1+(fd*66)+hspeed,y,x-1+(fd*66),y+63,b_mask,0,0){
        switchfd = true;
        state = 0;
        timer = idletime;
    }else if !collision_point(x-1+(fd*66)+hspeed,y+64,b_mask,0,0){
        switchfd = true;
        state = 0;
        timer = idletime;
    }
}

if !place_meeting(x,y+1,b_mask)
vspeed +=0.8;

if abs(vspeed) &gt; 0 &amp;&amp; place_meeting(x,y+vspeed,b_mask)
{
    while !place_meeting(x,y+sign(vspeed),b_mask)
    {
        y += sign(vspeed);
    }
    vspeed =0;
}


if abs(hspeed) &gt; 0 &amp;&amp; place_meeting(x+hspeed,y,b_mask)
{
    while !place_meeting(x+sign(hspeed),y,b_mask)
    {
        x += sign(hspeed);
    }
    hspeed =0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Saddle Movement

saddleobj.x = x+32
saddleobj.y = y+32
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing

switch(state){
    case 0:
        draw_sprite_ext(npc_dino_sprite_02,-1,x+(fd*64),y,1-(2*fd),1,0,-1,1)
        break;
    case 1:
        draw_sprite_ext(npc_dino_walking_sprite_02,-1,x+(fd*64),y,1-(2*fd),1,0,-1,1)
        break;   
    case 2:
        if vspeed!=0
            draw_sprite_ext(npc_dino_riding_jump_sprite_02,-1,x+(fd*64),y,1-(2*fd),1,0,-1,1)  
        else if keyboard_check(vk_left) or keyboard_check(vk_right)
            draw_sprite_ext(npc_dino_riding_walking_sprite_02,-1,x+(fd*64),y,1-(2*fd),1,0,-1,1)      
        else 
            draw_sprite_ext(npc_dino_riding_sprite_02,-1,x+(fd*64),y,1-(2*fd),1,0,-1,1)        
        break;
}

/*
notes:
the fd part flips the image when facing the other direction. false = 0, true = 1.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
